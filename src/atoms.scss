// basic HTML elements like form labels, inputs, buttons, and others that canâ€™t be broken down any further without ceasing to be functional.

$black: #0A0A0A;
  $white: #FAFAFA;
  $primary: rgb(242,201,76);
  $primary__dark: #bb6a1b;

$light-fallback: rgb(242,201,76);
$light: linear-gradient(-45deg, rgba(242,201,76,0.5) 0%, rgba(242,153,74,0.5) 100%);

$lake-fallback: rgb(0,0,70);
$lake: linear-gradient(0deg, rgba(0,0,70,1) 0%, rgba(28,181,224,1) 100%);

$three: 1fr minmax(min-content, 44em) 1fr;

body {
  font-family: sans-serif;
  font-size: 14px;
  line-height: 1.5;
  color: $black;
  // cursor: url("svg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' circle cx='50' cy='50' r='50' /svg");
}

a {
  color: $primary__dark;
}

a:hover {
  text-decoration: line-through;
}

h1 {
  font-size: 48px;
  font-weight: bold;
  padding: 1em;
  border: 8px solid $black;
}

img {
  max-width: 100%;
}

ul {
  list-style-type: none;
}

li { // this is way too complex for the base element
  animation-name: animateIn;
  animation-duration: 350ms;
  animation-delay: calc(var(--animation-order) * 1000ms);
  animation-fill-mode: both;
  animation-timing-function: ease-in-out;
}

@keyframes animateIn {
  0% {
    opacity: 0;
    transform: scale(0.6) translateY(-8px);
  }

  100% {
    opacity: 1;
  }
}

input {
  padding: 1em;
  width: 100%;
  border-radius: 4px;
  margin-bottom: 1.5em;
  font-size: 1.25em;
  caret-color: $primary;
  border-color: $primary;
}

button {
  background: linear-gradient(-45deg, rgb(242,201,76) 0%, rgb(242,153,74) 100%);
  padding: 1em;
  border-radius: 4px;
  color: $white;
  font-size: 1.25em;
}

.screen-reader {
  visibility: hidden;
}

/*.width-100 {
  width: 100%;
} */

/* .icon {
  display: grid;
  justify-items: center;
} */

/* .measure {
  margin: 0 auto;
  grid-row: 2;
  grid-column: 1/4;
} */

/* .profile {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); // this isnt dropping down on small
} */

/* .text-center {
  text-align: center;
} */

.light {
  background: $light-fallback;
  background: $light;
  height: 90vh;
  display: grid;
  grid-template-columns: $three;
  padding: 2em;
}

.lake {
  background: $lake-fallback;
  background: $lake;
  color: $white;
  height: 90vh;
}

.lake a {
  color: $white;
}

/* .vert {
  writing-mode: vertical-rl;
} */

.label {
  grid-row: 1;
  justify-self: start;
  writing-mode: vertical-rl;
  margin: 0;
}

.return {
  grid-row: 3;
  grid-column: 3;
  writing-mode: vertical-rl;
  align-self: center; // to be above recaptcha when shown
}

.shadow {
  filter: drop-shadow(4px 4px 2px rgba(0, 0, 0, 0.2));
  transition-duration: 350ms;
}

.shadow:hover {
  filter: drop-shadow(4px 4px 2px rgba(0, 0, 0, 0.4));
}

.out {
  color: transparent;
  font-size: 2.5em;
  -webkit-text-stroke: 1.5px $white;
  letter-spacing: .1rem;
  paint-order: stroke fill; // css validator issue https://developer.mozilla.org/en-US/docs/Web/CSS/paint-order
}

.lake .out {
  -webkit-text-stroke: 1.5px $primary__dark;
}

// performance
@keyframes rotating {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
.rotating {
  animation: rotating 2s linear infinite;
  stroke-linecap: round;
  width: 50%;
  margin: 0 auto;
}

.rotating circle {
  fill: none;
  stroke-width: 3.5;

  &:nth-of-type(1) {
    stroke-dasharray: 400;
  }

  &:nth-of-type(2) {
    stroke-dasharray: 300;
  }

  &:nth-of-type(3) {
    stroke-dasharray: 200;
  }
}

// security
@keyframes pop
{
  0% {
    stroke-width: 0;
    stroke-opacity: 1;
  }
  100% {
    stroke-width: 8;
    stroke-opacity: 0;
  }
}

.paths {
  width: 20%;
  margin: 0 auto;
}

.paths path {
  &:nth-of-type(1) {
    animation: pop 2s infinite ease;
    stroke: rgba(0, 0, 0, 0.2);
  }
}

.logo-pop circle {
  animation: pop 2s infinite ease;
  stroke: rgba(0, 0, 0, 0.2);
}
